import kotlin.String;
import kotlin.collections.Set;
import kotlinx.datetime.Instant;

CREATE TABLE IF NOT EXISTS `bookmarks` (
    `id` INTEGER PRIMARY KEY NOT NULL,
    `external_id` INTEGER NOT NULL,
    `url` TEXT NOT NULL,
    `urlHost` TEXT NOT NULL,
    `title` TEXT NOT NULL,
    `description` TEXT NOT NULL,
    `archived` INTEGER AS kotlin.Boolean DEFAULT 0 NOT NULL,
    `unread` INTEGER AS kotlin.Boolean DEFAULT 0 NOT NULL,
    `tags` TEXT AS Set<String> NOT NULL,
    `added` TEXT AS Instant,
    `modified` TEXT AS Instant
);

CREATE UNIQUE INDEX IF NOT EXISTS `index_bookmarks_id` ON `bookmarks` (`id`);

countBookmarks:
SELECT count(*) FROM bookmarks;

bookmarkEntries:
SELECT *
FROM bookmarks
ORDER BY id DESC
LIMIT :limit OFFSET :offset;

keyedQuery:
SELECT * FROM bookmarks
WHERE id >= :beginInclusive AND (id < :endExclusive OR :endExclusive IS NULL)
ORDER BY id DESC;

insert:
INSERT INTO bookmarks (
    `id`,
    `external_id`,
    `url`,
    `urlHost`,
    `title`,
    `description`,
    `archived`,
    `unread`,
    `tags` ,
    `added`,
    `modified`
) VALUES (
    :id,
    :external_id,
    :url,
    :urlHost,
    :title,
    :description,
    :archived,
    :unread,
    :tags,
    :added,
    :modified
);

update:
UPDATE bookmarks SET
    `external_id` = :external_id,
    `url` = :url,
    `urlHost` = :urlHost,
    `title` = :title,
    `description` = :description,
    `archived` = :archived,
    `unread` = :unread,
    `tags` = :tags,
    `added` = :added,
    `modified` = :modified
WHERE id = :id;

delete:
DELETE FROM bookmarks WHERE id = :id;

deleteAll:
DELETE FROM bookmarks;

upsert {
    UPDATE bookmarks SET
        `external_id` = :external_id,
        `url` = :url,
        `urlHost` = :urlHost,
        `title` = :title,
        `description` = :description,
        `archived` = :archived,
        `unread` = :unread,
        `tags` = :tags,
        `added` = :added,
        `modified` = :modified
    WHERE id = :id;
    INSERT OR IGNORE INTO bookmarks (
        `id`,
        `external_id`,
        `url`,
        `urlHost`,
        `title`,
        `description`,
        `archived`,
        `unread`,
        `tags`,
        `added`,
        `modified`
    ) VALUES (
         :id,
         :external_id,
         :url,
         :urlHost,
         :title,
         :description,
         :archived,
         :unread,
         :tags,
         :added,
         :modified
     );
}
